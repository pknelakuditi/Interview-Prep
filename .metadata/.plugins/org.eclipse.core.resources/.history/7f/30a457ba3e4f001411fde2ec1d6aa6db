import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class TreePruning {
	public static void main(String[] args) {
         
		

		
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int k = sc.nextInt();
		
		int[][] edges = new int[n - 1][2];
		long[] weight = new long[n];
		for (int i1 = 0; i1 < n; i1++) {
			weight[i1] = sc.nextInt();
		}
		for (int i1 = 0; i1 < n - 1; i1++) {
			edges[i1][0] = sc.nextInt();
			edges[i1][1] = sc.nextInt();

		}
		
		List<Integer>[] child=children(weight,edges);
		
	//	System.out.println(treeWeight(2,weight,edges));
		
	}

	private static List<Integer>[] children(long[] weight, int[][] edges) {
		int n=weight.length;
		List<Integer>[] l = new ArrayList[n];
		int temp=1;
		boolean[] track=new boolean[n];
		track[0]=true;
	/*	boolean flag=false;
		while(!flag){	
			for(int i=0;i<n;i++){
				if(!track[i]){
					flag=false;
					break;
				}else{
					flag=true;
				}
			}
		}*/
		l[temp-1]=childrenX(temp,track,weight,edges);
		for(int k=0;k<l[temp-1].size();k++){
			int a=l[temp-1].get(k);
			track[a-1]=true;
			childrenX(a,track,weight,edges);
			
		}
		
		return null;
	}

	private static List<Integer> childrenX(int temp, boolean[] track,
			long[] weight, int[][] edges) {
		System.out.println("children of "+temp);
		List<Integer> l=new ArrayList<Integer>();
		for (int i1 = 0; i1 < track.length - 1; i1++) {
			 if(edges[i1][0]==temp){
				if(!track[edges[i1][1]-1]){
					l.add(edges[i1][1]);
					System.out.println(edges[i1][1]);
				}
			 }else if(edges[i1][1]==temp){
				 if(!track[edges[i1][0]-1]){
						l.add(edges[i1][0]);
						System.out.println(edges[i1][0]);
					}
			 }

		}
		
		return null;
	}

	private static int treeWeight(int i, long[] weight, int[][] edges) {
		return i;
		
	}

}
