import java.math.BigInteger;
import java.util.Scanner;

// n-k+1 C k
public class Lovers {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		double[][] a = new double[n][2];
		for (int i = 0; i < n; i++) {
			a[i][0] = sc.nextDouble();
			a[i][1] = sc.nextDouble();
		}
        ways(a,n);
		sc.close();
	}

	private static void ways(double[][] a, int n) {
		BigInteger temp=new BigInteger("0");
		
		for (int i = 0; i < n; i++) {
			if(a[i][1]<=a[i][0]/2){
				BigInteger[] t=new BigInteger[3];
				t=factorial(a[i][0]-a[i][1]+1,a[i][0]-2*a[i][1]+1,a[i][1]);
			//	temp=factorial(a[i][0]-a[i][1]+1)/(factorial(a[i][0]-2*a[i][1]+1)*factorial(a[i][1]));
				temp=t[0].divide(t[1].multiply(t[2]));
				
				//temp=t[0]/(t[1]*t[2]);
				System.out.println(temp);
			}
			else{
				System.out.println(0);
			}
		}	
	}
	
private static BigInteger[] factorial(double n,double b,double c) {
	BigInteger[] t=new BigInteger[3];
	BigInteger result = new BigInteger("1");
	BigInteger test2 = new BigInteger("1");
	BigInteger test = new BigInteger("1");
      for (double i = 1; i <= n; i++) {
    	
          result = result.multiply(test);
          System.out.println("result "+result);
          test=test.add(test2);
          System.out.println("loo "+test);
          if (i==b){t[1]=result;System.out.println(t[1]);}
          if (i==c){t[2]=result;System.out.println(t[2]);}
      }
      t[0]=result;
      System.out.println(t[0]);
	return t;	
		
	}
	



	

}
