import java.math.BigInteger;
import java.util.Scanner;

// n-k+1 C k
public class Lovers {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		double[][] a = new double[n][2];
		for (int i = 0; i < n; i++) {
			a[i][0] = sc.nextDouble();
			a[i][1] = sc.nextDouble();
		}
		ways(a, n);
		sc.close();
	}

	private static void ways(double[][] a, int n) {
		BigInteger temp = new BigInteger("0");
		BigInteger m = new BigInteger("100003");
		for (int i = 0; i < n; i++) {
			if (a[i][1] <= a[i][0] / 2) {
				BigInteger[] t = new BigInteger[2];
				t[0] = factorialM(a[i][0] - a[i][1] + 1, a[i][0] - 2 * a[i][1] + 1);
				t[1]= factorialM(a[i][1],0);
				// temp=factorial(a[i][0]-a[i][1]+1)/(factorial(a[i][0]-2*a[i][1]+1)*factorial(a[i][1]));
				temp = t[0].divide(t[1]);

				// temp=t[0]/(t[1]*t[2]);
				System.out.println(temp.mod(m));
			} else {
				if(a[i][1] == (a[i][0]+1) / 2){System.out.println(1);}
				else{System.out.println(0);}
				
			}
		}
	}

	private static BigInteger factorialM(double n, double b) {
		BigInteger result = new BigInteger("1");
		BigInteger test2 = new BigInteger("1");
		BigInteger test = new BigInteger("1");
		for (double i = b+1; i <= n; i++) {
			result = result.multiply(test);			
			test = test.add(test2);	
		}
		
		return result;
		

	}
	
	


}

