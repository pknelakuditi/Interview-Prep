package week.eleven;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

import week.eleven.TreePruning.Node;

public class TreePruning {
	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int k = sc.nextInt();

		int[][] edges = new int[n - 1][2];
		int[] weight = new int[n];
		for (int i1 = 0; i1 < n; i1++) {
			weight[i1] = sc.nextInt();
		}
		for (int i1 = 0; i1 < n - 1; i1++) {
			edges[i1][0] = sc.nextInt();
			edges[i1][1] = sc.nextInt();

		}
		List<Node> nodes=new ArrayList<Node>();
		boolean[] bol = new boolean[n];
		bol[0] = true;
		Node temp = new Node(weight[0], 1, bol, edges);
		intialize(temp,bol,nodes,edges,weight);
		//tree(nodes.get(0), weight, edges);
      System.out.println(nodes.get(0).weight);
		sc.close();
	}

	private static void intialize(Node node, boolean[] bol,List<Node> nodes,int[][] edges,int[] weight) {
		nodes.add(node);
		Iterator<Integer> a=node.child.iterator(),b=node.child.iterator();
		while(a.hasNext()){
			int index1 = a.next();
			bol[index1-1]=true;
					}
		
		while(b.hasNext()){
			int index1 = b.next();
			if(!bol[index1-1]){
				nodes.add(new Node(weight[index1-1],index1,bol,edges));
			}
					}
		
		//return null;
		
	}

	private static void tree(Node node, int[] weight,int[][] edges) {
		while (node.child.iterator().hasNext()) {
			int index = node.child.iterator().next();
			
		}
	}

	public static class Node {
		public int weight;
		public int index;
		public int tWeight;
		public List<Integer> child;

		public Node(int weight, int index, boolean[] bol, int[][] edges) {
			super();
			this.weight = weight;
			this.index = index;
			this.child = findChild(bol, edges);
		}

		public List<Integer> findChild(boolean[] bol, int[][] edges) {
			List<Integer> children = new ArrayList<Integer>();
			for (int i = 0; i < edges.length; i++) {
				if (index == edges[i][0]) {
					if (!bol[edges[i][1]]) {
						children.add(edges[i][1]);
					}
				} else if (index == edges[i][1]) {
					if (!bol[edges[i][0]]) {
						children.add(edges[i][0]);
					}
				}
			}
			return children;
		}

		public void tw(){
			Queue s=new Queue();
			s.add(this);
			
		}
	}
}
