import java.util.Scanner;

public class AlmostSorted {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		double[] a = new double[n];
		for (int i = 0; i < n; i++) {
			a[i] = sc.nextDouble();
		}
		almostSorted(a, n);
		sc.close();
	}

	public static boolean almostSorted(double[] a, int n) {
		double temp = a[0];
		boolean flag = true;
		double[] a1 = new double[n];
		int i = 1;
		int f1 = 0, f2 = 0;
		int t = 0;
		while (i < n) {
			if (a[i] > temp) {
				temp = a[i];
			} else {
				flag = false;
				int k = n - 1;

				while (k > i - 1) {

					for (int i1 = 0; i1 < n; i1++) {
						a1[i1] = a[i1];
					}
					swap(i - 1, k, a1);
					if (isSorted(a1)) {
						f1 = i - 1;
						f2 = k;
						flag = true;
						// System.out.println("Doennnnnnnnnnnnnnnn");
						System.out.println("yes");

						System.out.print("swap ");
						System.out.print(f1 + 1);
						System.out.print(" ");
						System.out.print(f2 + 1);
						return true;
					}
					
					if(i-2<k-1 && i-2>0){
						//System.out.println((i-2)+" reverse "+k-1);
					reverse(i - 2, k - 1, a1);
					if (isSorted(a1)) {
						f1 = i - 1;
						f2 = k;
						flag = true;

						System.out.println("yes");
						System.out.print("reverse ");
						System.out.print(f1 + 1);
						System.out.print(" ");
						System.out.print(f2 + 1);

						return true;
					}}
					k--;
				}
				System.out.println("no");
				return false;
			}
			i++;
		}
		System.out.println("yes");
		return true;

	}

	private static void reverse(int i, int j, double[] a) {
		System.out.println(i+" reverse "+j);
		while (i < j) {
			swap(i, j, a);
			j--;
			i++;
		}

	}

	private static void swap(int a, int b, double[] ar) {
		double temp = ar[a];
		ar[a] = ar[b];
		ar[b] = temp;
		// System.out.println(ar[b] + " swap " + ar[a]);
	}

	private static boolean isSorted(double[] a) { // assume is sorted, attempt
													// to
													// prove otherwise
		for (int i = 0; i < a.length - 1; i++) {

			if (a[i] > a[i + 1]) {
				return false;
			}

		}

		return true; // got to the end, must be sorted
	}
}
